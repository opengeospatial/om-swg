{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "DataRecord": {
      "description": "Implementation of ISO-11404 Record datatype. This allows grouping (sequence) of data components which can themselves be simple types, records, arrays or choices",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractDataComponent"
        },
        {
          "properties": {
            "type": {
              "const": "DataRecord"
            },
            "fields": {
              "description": "Definition of the field provided as a nested data component. The field can be scalar or can itself be an aggregate such as a record, choice or array",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/SoftNamedProperty"
                  },
                  {
                    "$ref": "#/definitions/AssociationAttributeGroup"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/Boolean"
                      },
                      {
                        "$ref": "#/definitions/Category"
                      },
                      {
                        "$ref": "#/definitions/CategoryRange"
                      },
                      {
                        "$ref": "#/definitions/Count"
                      },
                      {
                        "$ref": "#/definitions/CountRange"
                      },
                      {
                        "$ref": "#/definitions/DataArray"
                      },
                      {
                        "$ref": "#/definitions/DataChoice"
                      },
                      {
                        "$ref": "#/definitions/DataRecord"
                      },
                      {
                        "$ref": "#/definitions/Matrix"
                      },
                      {
                        "$ref": "#/definitions/Quantity"
                      },
                      {
                        "$ref": "#/definitions/QuantityRange"
                      },
                      {
                        "$ref": "#/definitions/Text"
                      },
                      {
                        "$ref": "#/definitions/Time"
                      },
                      {
                        "$ref": "#/definitions/TimeRange"
                      },
                      {
                        "$ref": "#/definitions/Vector"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "required": [
            "type",
            "fields"
          ]
        }
      ]
    },
    "Vector": {
      "description": "Implementation of a mathematical vector composed of a list of scalar coordinates expressed in the mandatory reference frame.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractDataComponent"
        },
        {
          "properties": {
            "type": {
              "const": "Vector"
            },
            "referenceFrame": {
              "description": "Frame of reference (usually spatial) with respect to which the coordinates of this vector are expressed. A reference frame anchors a vector value to a real world datum.",
              "type": "string",
              "format": "uri"
            },
            "localFrame": {
              "description": "Frame of reference whose origin is located by the coordinates of this vector",
              "type": "string",
              "format": "uri"
            },
            "coordinates": {
              "description": "Definition of the coordinate provided as a data component with a numerical representation",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/SoftNamedProperty"
                  },
                  {
                    "$ref": "#/definitions/AssociationAttributeGroup"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/Count"
                      },
                      {
                        "$ref": "#/definitions/Quantity"
                      },
                      {
                        "$ref": "#/definitions/Time"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "required": [
            "type",
            "referenceFrame",
            "coordinates"
          ]
        }
      ]
    },
    "DataArray": {
      "description": "Implementation of ISO-11404 Array datatype. This defines an array of identical data components with a elementCount. Values are given as a block and can be encoded in different ways",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractDataComponent"
        },
        {
          "properties": {
            "type": {
              "const": "DataArray"
            },
            "elementCount": {
              "description": "Specifies the size of the array (i.e. the number of elements of the defined type it contains)",
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/Count"
                }
              ]
            },
            "elementType": {
              "description": "Defines the structure of the element that will be repeated in the array",
              "allOf": [
                {
                  "$ref": "#/definitions/SoftNamedProperty"
                },
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Boolean"
                    },
                    {
                      "$ref": "#/definitions/Category"
                    },
                    {
                      "$ref": "#/definitions/CategoryRange"
                    },
                    {
                      "$ref": "#/definitions/Count"
                    },
                    {
                      "$ref": "#/definitions/CountRange"
                    },
                    {
                      "$ref": "#/definitions/DataArray"
                    },
                    {
                      "$ref": "#/definitions/DataChoice"
                    },
                    {
                      "$ref": "#/definitions/DataRecord"
                    },
                    {
                      "$ref": "#/definitions/Matrix"
                    },
                    {
                      "$ref": "#/definitions/Quantity"
                    },
                    {
                      "$ref": "#/definitions/QuantityRange"
                    },
                    {
                      "$ref": "#/definitions/Text"
                    },
                    {
                      "$ref": "#/definitions/Time"
                    },
                    {
                      "$ref": "#/definitions/TimeRange"
                    },
                    {
                      "$ref": "#/definitions/Vector"
                    }
                  ]
                }
              ]
            },
            "encoding": {
              "description": "Specifies the type of method used to encode the array values",
              "oneOf": [
                {
                  "$ref": "#/definitions/BinaryEncoding"
                },
                {
                  "$ref": "#/definitions/TextEncoding"
                },
                {
                  "$ref": "#/definitions/XMLEncoding"
                }
              ]
            },
            "values": {
              "description": "If present, contains an encoded block of the values contained in the array. Values are optional so that the array definition can be used a as a schema for values provided externally",
              "$ref": "#/definitions/EncodedValues"
            }
          },
          "required": [
            "type",
            "elementCount",
            "elementType"
          ]
        }
      ]
    },
    "Matrix": {
      "description": "Implementation of ISO-11404 Array datatype. This defines an array of identical data components with a elementCount. Values are given as a block and can be encoded in different ways",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DataArray"
        },
        {
          "properties": {
            "type": {
              "const": "Matrix"
            },
            "referenceFrame": {
              "description": "Frame of reference (usually spatial) with respect to which the coordinates of this matrix are expressed",
              "type": "string",
              "format": "uri"
            },
            "localFrame": {
              "description": "Frame of reference whose origin is located by the transformation defined by this matrix",
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "DataStream": {
      "description": "Defines the structure of the element that will be repeated in the stream",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWEIdentifiable"
        },
        {
          "properties": {
            "type": {
              "const": "DataStream"
            },
            "elementCount": {
              "description": "Number of elements of the defined type that the stream contains",
              "$ref": "#/definitions/Count"
            },
            "elementType": {
              "description": "Definition and structure of one stream element",
              "allOf": [
                {
                  "$ref": "#/definitions/SoftNamedProperty"
                },
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/Boolean"
                    },
                    {
                      "$ref": "#/definitions/Category"
                    },
                    {
                      "$ref": "#/definitions/CategoryRange"
                    },
                    {
                      "$ref": "#/definitions/Count"
                    },
                    {
                      "$ref": "#/definitions/CountRange"
                    },
                    {
                      "$ref": "#/definitions/DataArray"
                    },
                    {
                      "$ref": "#/definitions/DataChoice"
                    },
                    {
                      "$ref": "#/definitions/DataRecord"
                    },
                    {
                      "$ref": "#/definitions/Matrix"
                    },
                    {
                      "$ref": "#/definitions/Quantity"
                    },
                    {
                      "$ref": "#/definitions/QuantityRange"
                    },
                    {
                      "$ref": "#/definitions/Text"
                    },
                    {
                      "$ref": "#/definitions/Time"
                    },
                    {
                      "$ref": "#/definitions/TimeRange"
                    },
                    {
                      "$ref": "#/definitions/Vector"
                    }
                  ]
                }
              ]
            },
            "encoding": {
              "description": "Method used to encode the stream values",
              "oneOf": [
                {
                  "$ref": "#/definitions/BinaryEncoding"
                },
                {
                  "$ref": "#/definitions/TextEncoding"
                },
                {
                  "$ref": "#/definitions/XMLEncoding"
                }
              ]
            },
            "values": {
              "description": "Encoded values for the stream (can be out of band)",
              "$ref": "#/definitions/EncodedValues"
            }
          },
          "required": [
            "type",
            "elementType",
            "encoding",
            "values"
          ]
        }
      ]
    },
    "Block": {
      "description": "Binary encoding parameters used to encode a block of values at once. This is used for encrypting or compressing a complete array of values for instance",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {
            "type": {
              "const": "Block"
            },
            "compression": {
              "description": "Name of the compression method used to encrypt the block of values described by the referenced data component",
              "type": "string",
              "format": "uri"
            },
            "encryption": {
              "description": "Name of the encryption method used to encrypt the block of values described by the referenced data component",
              "type": "string",
              "format": "uri"
            },
            "paddingBytes-after": {
              "description": "Number of padding bytes present in the stream after this binary block",
              "type": "integer"
            },
            "paddingBytes-before": {
              "description": "Number of padding bytes present in the stream before this binary block",
              "type": "integer"
            },
            "byteLength": {
              "description": "Length in byte of this binary block (if known in advance)",
              "type": "integer"
            },
            "ref": {
              "description": "Reference to the aggregate data component that this binary block encoding settings apply to",
              "type": "string"
            }
          },
          "required": [
            "type",
            "ref"
          ]
        }
      ]
    },
    "BinaryEncoding": {
      "description": "Parameters of the binary encoding method",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractEncoding"
        },
        {
          "properties": {
            "type": {
              "const": "BinaryEncoding"
            },
            "byteOrder": {
              "description": "Byte order convention used to encode this binary data (big endian = most significant byte first, MSB or little endian = least significant byte first, LSB)",
              "type": "string",
              "enum": [
                "bigEndian",
                "littleEndian"
              ]
            },
            "byteEncoding": {
              "description": "Byte encoding method used to encode the binary data (raw or base 64)",
              "type": "string",
              "enum": [
                "base64",
                "raw"
              ]
            },
            "byteLength": {
              "description": "Total length in bytes of the binary stream (if known in advance)",
              "type": "integer"
            },
            "members": {
              "description": "Each member contains detailed parameters for encoding a scalar value or a block of values",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/Component"
                  },
                  {
                    "$ref": "#/definitions/Block"
                  }
                ]
              }
            }
          },
          "required": [
            "type",
            "byteOrder",
            "byteEncoding",
            "members"
          ]
        }
      ]
    },
    "Component": {
      "description": "Binary encoding parameters used for encoding a single data component",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {
            "type": {
              "const": "Component"
            },
            "encryption": {
              "description": "Name of the encryption method used to encrypt the value of this field",
              "type": "string",
              "format": "uri"
            },
            "significantBits": {
              "description": "Number of significant bits actually used for a binary encoded numerical value (all remaining bits shall be set to 0)",
              "type": "integer"
            },
            "bitLength": {
              "type": "integer"
            },
            "byteLength": {
              "description": "Byte length of this field when a custom data type is used",
              "type": "integer"
            },
            "dataType": {
              "description": "Binary data type used to encode the value(s) of the referenced data component",
              "type": "string",
              "format": "uri"
            },
            "ref": {
              "description": "Reference to the data component that these binary encoding settings apply to",
              "type": "string"
            }
          },
          "required": [
            "type",
            "dataType",
            "ref"
          ]
        }
      ]
    },
    "DataChoice": {
      "description": "Implementation of a choice of two or more Data Components (also called disjoint union)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractDataComponent"
        },
        {
          "properties": {
            "type": {
              "const": "DataChoice"
            },
            "choiceValue": {
              "description": "This category component marks the data stream element that will indicate the actual choice made. Possible choices are listed in the Category constraint section as an enumeration and should map to item names.",
              "$ref": "#/definitions/Category"
            },
            "items": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/SoftNamedProperty"
                  },
                  {
                    "$ref": "#/definitions/AssociationAttributeGroup"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/Boolean"
                      },
                      {
                        "$ref": "#/definitions/Category"
                      },
                      {
                        "$ref": "#/definitions/CategoryRange"
                      },
                      {
                        "$ref": "#/definitions/Count"
                      },
                      {
                        "$ref": "#/definitions/CountRange"
                      },
                      {
                        "$ref": "#/definitions/DataArray"
                      },
                      {
                        "$ref": "#/definitions/DataChoice"
                      },
                      {
                        "$ref": "#/definitions/DataRecord"
                      },
                      {
                        "$ref": "#/definitions/Matrix"
                      },
                      {
                        "$ref": "#/definitions/Quantity"
                      },
                      {
                        "$ref": "#/definitions/QuantityRange"
                      },
                      {
                        "$ref": "#/definitions/Text"
                      },
                      {
                        "$ref": "#/definitions/Time"
                      },
                      {
                        "$ref": "#/definitions/TimeRange"
                      },
                      {
                        "$ref": "#/definitions/Vector"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "required": [
            "type",
            "items"
          ]
        }
      ]
    },
    "Count": {
      "description": "Scalar component with integer representation used for a discrete counting value",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "Count"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedValues"
                }
              ]
            },
            "value": {
              "description": "Value is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "integer"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "CategoryRange": {
      "description": "Pair of categorical values used to specify a range in an ordinal reference system (specified by the code space)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "CategoryRange"
            },
            "codeSpace": {
              "description": "Name of the dictionary defining an ordered set of values with respect to which the range is expressed (ordinal reference system)",
              "$ref": "#/definitions/AssociationAttributeGroup"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedTokens"
                }
              ]
            },
            "value": {
              "description": "Value is a pair of tokens separated by a space (if tokens contain spaces, they must be espaced by using XML entities). It is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "AbstractSimpleComponent": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractDataComponent"
        },
        {
          "properties": {
            "referenceFrame": {
              "description": "Frame of reference (usually temporal or spatial) with respect to which the value of the component is expressed. A reference frame anchors a value to a real world datum.",
              "type": "string",
              "format": "uri"
            },
            "axisID": {
              "description": "Specifies the reference axis (refer to gml:axisID). The reference frame URI should also be specified unless it is inherited from parent Vector",
              "type": "string"
            },
            "quality": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/AssociationAttributeGroup"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/definitions/Quantity"
                      },
                      {
                        "$ref": "#/definitions/QuantityRange"
                      },
                      {
                        "$ref": "#/definitions/Category"
                      },
                      {
                        "$ref": "#/definitions/Text"
                      }
                    ]
                  }
                ]
              }
            },
            "nilValues": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/NilValues"
                }
              ]
            }
          },
          "required": [
            "definition"
          ]
        }
      ]
    },
    "QuantityRange": {
      "description": "Decimal pair for specifying a quantity range with a unit of measure",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "QuantityRange"
            },
            "uom": {
              "description": "Unit of measure used to express the value of this data component",
              "$ref": "#/definitions/UnitReference"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedValues"
                }
              ]
            },
            "value": {
              "description": "Value is a pair of double numbers separated by a space. It is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "number"
              }
            }
          },
          "required": [
            "type",
            "uom"
          ]
        }
      ]
    },
    "Time": {
      "description": "Scalar component used to represent a time quantity either as ISO 8601 (e.g. 2004-04-18T12:03:04.6Z) or as a duration relative to a time of reference",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "Time"
            },
            "referenceTime": {
              "description": "Specifies the origin of the temporal reference frame as an ISO8601 date (used to specify time after an epoch that is to say in a custom frame)",
              "type": "string",
              "format": "date-time"
            },
            "localFrame": {
              "description": "Temporal frame of reference whose origin is located by the value of this component",
              "type": "string",
              "format": "uri"
            },
            "uom": {
              "description": "Temporal unit of measure used to express the value of this data component",
              "$ref": "#/definitions/UnitReference"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedTimes"
                }
              ]
            },
            "value": {
              "description": "Value is optional, to enable structure to act as a schema for values provided using other encodings",
              "oneOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "required": [
            "type",
            "uom"
          ]
        }
      ]
    },
    "TimeRange": {
      "description": "Time value pair for specifying a time range (can be a decimal or ISO 8601)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "TimeRange"
            },
            "referenceTime": {
              "description": "Specifies the origin of the temporal reference frame as an ISO8601 date (used to specify time after an epoch that is to say in a custom frame)",
              "type": "string",
              "format": "date-time"
            },
            "localFrame": {
              "description": "Temporal frame of reference whose origin is located by the value of this component",
              "type": "string",
              "format": "uri"
            },
            "uom": {
              "description": "Temporal unit of measure used to express the value of this data component",
              "$ref": "#/definitions/UnitReference"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedTimes"
                }
              ]
            },
            "value": {
              "description": "Value is a pair of time values expressed in ISO-8601 or as decimal numbers separated by a space. It is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            }
          },
          "required": [
            "type",
            "uom"
          ]
        }
      ]
    },
    "Boolean": {
      "description": "Scalar component used to express truth: True or False, 0 or 1",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "Boolean"
            },
            "value": {
              "description": "Value is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "boolean"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Text": {
      "description": "Free text component used to store comments or any other type of textual statement",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "Text"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedTokens"
                }
              ]
            },
            "value": {
              "description": "Value is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "string"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Category": {
      "description": "Scalar component used to represent a categorical value as a simple token identifying a term in a code space",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "Category"
            },
            "codeSpace": {
              "description": "Name of the dictionary where the possible values for this component are listed and defined",
              "$ref": "#/definitions/AssociationAttributeGroup"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedTokens"
                }
              ]
            },
            "value": {
              "description": "Value is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "string"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Quantity": {
      "description": "Scalar component with decimal representation and a unit of measure used to store value of a continuous quantity",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "Quantity"
            },
            "uom": {
              "description": "Unit of measure used to express the value of this data component",
              "$ref": "#/definitions/UnitReference"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedValues"
                }
              ]
            },
            "value": {
              "description": "Value is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "number"
            }
          },
          "required": [
            "type",
            "uom"
          ]
        }
      ]
    },
    "AbstractDataComponent": {
      "description": "Abstract base class for all data components",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWEIdentifiable"
        },
        {
          "properties": {
            "updatable": {
              "description": "Specifies if the value of a data component can be updated externally (i.e. is variable)",
              "type": "boolean"
            },
            "optional": {
              "description": "Specifies that data for this component can be omitted in the datastream",
              "type": "boolean"
            },
            "definition": {
              "description": "Reference to semantic information defining the precise nature of the component",
              "type": "string",
              "format": "uri"
            }
          }
        }
      ]
    },
    "CountRange": {
      "description": "Integer pair used for specifying a count range",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSimpleComponent"
        },
        {
          "properties": {
            "type": {
              "const": "CountRange"
            },
            "constraint": {
              "allOf": [
                {
                  "$ref": "#/definitions/AssociationAttributeGroup"
                },
                {
                  "$ref": "#/definitions/AllowedValues"
                }
              ]
            },
            "value": {
              "description": "Value is a pair of integer numbers separated by a space. It is optional, to enable structure to act as a schema for values provided using other encodings",
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "integer"
              }
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "NilValues": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {
            "type": {
              "const": "NilValues"
            },
            "nilValues": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "format": "uri"
                  },
                  "value": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                },
                "required": [
                  "reason",
                  "value"
                ]
              }
            }
          },
          "required": [
            "type",
            "nilValues"
          ]
        }
      ]
    },
    "AllowedTokens": {
      "description": "Defines permitted values for the component, as an enumerated list of tokens or a regular expression pattern",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {
            "type": {
              "const": "AllowedTokens"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pattern": {
              "type": "string"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "AllowedValues": {
      "description": "Defines the permitted values for the component as an enumerated list and/or a list of inclusive ranges",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {
            "type": {
              "const": "AllowedValues"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "intervals": {
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "type": "number"
                }
              }
            },
            "significantFigures": {
              "type": "integer"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "AllowedTimes": {
      "description": "Defines the permitted values for the component, as a time range or an enumerated list of time values",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {
            "type": {
              "const": "AllowedTimes"
            },
            "values": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "intervals": {
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "date-time"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            },
            "significantFigures": {
              "type": "integer"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "AbstractEncoding": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {}
        }
      ]
    },
    "XMLEncoding": {
      "description": "Parameters of the XML encoding method",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractEncoding"
        },
        {
          "properties": {
            "type": {
              "const": "XMLEncoding"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "TextEncoding": {
      "description": "Parameters of the text encoding method",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractEncoding"
        },
        {
          "properties": {
            "type": {
              "const": "TextEncoding"
            },
            "collapseWhiteSpaces": {
              "description": "Indicates whether white spaces (i.e. space, tab, CR, LF) should be collapsed with separators when parsing the data stream",
              "type": "boolean"
            },
            "decimalSeparator": {
              "description": "Character used as the decimal separator",
              "type": "string"
            },
            "tokenSeparator": {
              "description": "Character sequence used as the token separator (i.e. between two successive values)",
              "type": "string"
            },
            "blockSeparator": {
              "description": "Character sequence used as the block separator (i.e. between two successive blocks in the data set. The end of a block is reached once all values from the data tree have been encoded once)",
              "type": "string"
            }
          },
          "required": [
            "type",
            "tokenSeparator",
            "blockSeparator"
          ]
        }
      ]
    },
    "AbstractSWE": {
      "description": "Base substitution groups for all SWE Common objects other than value objects",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "extensions": {
          "description": "Extension slot for future extensions to this standard.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    },
    "AbstractSWEIdentifiable": {
      "description": "Base substitution groups for all SWE Common objects with identification metadata",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractSWE"
        },
        {
          "properties": {
            "identifier": {
              "description": "Unique identifier of the data component. It can be used to globally identify a particular component of the dataset, a process input/output or a universal constant",
              "type": "string",
              "format": "uri"
            },
            "label": {
              "description": "Textual label for the data component . This is often used for displaying a human readable name for a dataset field or a process input/output",
              "type": "string"
            },
            "description": {
              "description": "Textual description (i.e. human readable) of the data component usually used to clarify its nature",
              "type": "string"
            }
          }
        }
      ]
    },
    "SoftNamedProperty": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "AssociationAttributeGroup": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "format": "uri"
        },
        "role": {
          "type": "string",
          "format": "uri"
        },
        "arcrole": {
          "type": "string",
          "format": "uri"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "UnitReference": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AssociationAttributeGroup"
        },
        {
          "properties": {
            "code": {
              "type": "string"
            }
          }
        }
      ],
      "oneOf": [
        {
          "required": [
            "code"
          ]
        },
        {
          "required": [
            "href"
          ]
        }
      ]
    },
    "EncodedValues": {
      "type": "array"
    }
  },
  "oneOf": [
    {
      "$ref": "#/definitions/DataRecord"
    },
    {
      "$ref": "#/definitions/Vector"
    },
    {
      "$ref": "#/definitions/DataArray"
    },
    {
      "$ref": "#/definitions/Matrix"
    },
    {
      "$ref": "#/definitions/DataStream"
    },
    {
      "$ref": "#/definitions/Block"
    },
    {
      "$ref": "#/definitions/BinaryEncoding"
    },
    {
      "$ref": "#/definitions/Component"
    },
    {
      "$ref": "#/definitions/DataChoice"
    },
    {
      "$ref": "#/definitions/Count"
    },
    {
      "$ref": "#/definitions/CategoryRange"
    },
    {
      "$ref": "#/definitions/QuantityRange"
    },
    {
      "$ref": "#/definitions/Time"
    },
    {
      "$ref": "#/definitions/TimeRange"
    },
    {
      "$ref": "#/definitions/Boolean"
    },
    {
      "$ref": "#/definitions/Text"
    },
    {
      "$ref": "#/definitions/Category"
    },
    {
      "$ref": "#/definitions/Quantity"
    },
    {
      "$ref": "#/definitions/CountRange"
    },
    {
      "$ref": "#/definitions/NilValues"
    },
    {
      "$ref": "#/definitions/AllowedTokens"
    },
    {
      "$ref": "#/definitions/AllowedValues"
    },
    {
      "$ref": "#/definitions/AllowedTimes"
    },
    {
      "$ref": "#/definitions/XMLEncoding"
    },
    {
      "$ref": "#/definitions/TextEncoding"
    }
  ]
}